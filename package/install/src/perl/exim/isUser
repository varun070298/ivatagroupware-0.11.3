#!/usr/bin/perl -Uw
################################################################################
# $Id: isUser,v 1.2 2005/04/09 17:19:52 colinmacleod Exp $
#
# Add a user to the system. This script is suited for UNIX-style operating
# system which uses shadow password security.
#
# To allow the user which runs this and the other system scripts, the script
# must be run in root user mode. This is achieved by running the sudo program
# which must be installed on the system.
#
# Since: ivata groupware 0.9 (2002-07-20)
# Author: Colin MacLeod <colin.macleod@ivata.com>
# $Revision: 1.2 $
#
################################################################################
# Copyright (c) 2001 - 2005 ivata limited.
# All rights reserved.
# ---------------------------------------------------------
# ivata groupware may be redistributed under the GNU General Public
# License as published by the Free Software Foundation;
# version 2 of the License.
#
# These programs are free software; you can redistribute them and/or
# modify them under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 of the License.
#
# These programs are distributed in the hope that they will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License in the file LICENSE.txt for more
# details.
#
# If you would like a copy of the GNU General Public License write to
#
# Free Software Foundation, Inc.
# 59 Temple Place - Suite 330
# Boston, MA 02111-1307, USA.
#
#
# To arrange commercial support and licensing, contact ivata at
#                  http://www.ivata.com/contact.jsp
#
################################################################################
#
# $Log: isUser,v $
# Revision 1.2  2005/04/09 17:19:52  colinmacleod
# Changed copyright text to GPL v2 explicitly.
#
# Revision 1.1.1.1  2005/03/10 17:49:17  colinmacleod
# Restructured ivata op around Hibernate/PicoContainer.
# Renamed ivata groupware.
#
# Revision 1.3  2004/11/03 18:32:31  colinmacleod
# Cleaned up code.
# Made the mail dir a setting in Site.pm.
#
# Revision 1.2  2004/03/21 21:16:32  colinmacleod
# Shortened name to ivata op.
#
# Revision 1.1  2004/02/05 21:54:07  colinmacleod
# Moved from webmail subproject.
#
# Revision 1.1.1.1  2004/01/27 20:59:57  colinmacleod
# Moved ivata op to sourceforge.
#
# Revision 1.2  2003/10/15 14:11:33  colin
# fixing for XDoclet
#
# Revision 1.4  2003/05/23 12:54:01  jano
# homeDir of user has to be 757
#
# Revision 1.3  2003/05/23 12:38:27  jano
# we changed name of directory "item" to "drive"
#
# Revision 1.2  2003/05/15 11:33:00  peter
# added creation of upload directories
#
# Revision 1.1  2003/02/24 19:09:24  colin
# moved to business
#
# Revision 1.10  2002/11/21 12:00:00  jano
# chmod 755 for mail directory in home directory of new user
#
# Revision 1.9  2002/11/15 10:48:25  ivatashop
# make link to home and change ownership
#
# Revision 1.8  2002/11/11 10:16:38  ivatashop
# we creating empty inbox, only touch /var/spool/mail, for new user, and change owner
#
# Revision 1.7  2002/11/07 15:54:35  ivatashop
# using function getGroupId
#
# Revision 1.6  2002/10/31 15:10:44  ivatashop
# fixed mkdir bug with the version of perl on raq3
#
# Revision 1.5  2002/10/25 14:07:01  jano
# directory of users is diffrent
#
# Revision 1.4  2002/10/25 12:05:57  jano
# whne user is creating make a home directory
#
# Revision 1.3  2002/10/25 07:31:06  jano
# using new method for converitng arguments from command line
#
# Revision 1.2  2002/10/24 11:51:26  colin
# Testing in London Red Hat/Sub Cobalt server
#
# Revision 1.1  2002/08/11 11:44:27  colin
# first version
# scripts written for and tested on Debian exim server
#
################################################################################

################################################################################
# includes
use strict;
use Exim;
use Site;
################################################################################

################################################################################
# variable declarations
# full name of the user
my $FULL_NAME;
# used to store all the ids in the system
my @UIDS = ();
# system user name
my $USER_NAME;

################################################################################

################################################################################
# function prototypes
sub isUser();
sub describeCommandLine();
sub parseCommandLine();
################################################################################

################################################################################
# main routine
# if the command line parsing fails or the user specifies he wants help, then
# bring up the help screen
if(!parseCommandLine()) {
    describeCommandLine();
    dieInvalidArguments();
# otherwise rock & roll
} else {
    isUser();
}
################################################################################

################################################################################
# describeCommandLine: print out command line options.
# params:
#        NONE
# returns:
#        NONE
sub describeCommandLine() {
    print "\n";
    print "                                --- isUser ---\n";
    print "                   ivata's tool to check a user on *NIX systems.\n";
    print " Description:\n";
    print "       This program must be run as root and will check a user in the operating\n";
    print "       system. If the user exists, then the string 'true' is printed (no quotes),\n";
    print "       otherwise 'false' is printed to STDOUT.\n";
    print "\n";
    print "       You need perl installed on your system to use this tool.\n";
    print "\n";
    print " Usage: \n";
    print "       isUser {username}\n";
    print "\n";
    print " Key:\n";
    print "  username      user name to set.\n";
    print "\n";
}

################################################################################
# isUser: this is it - all in one method
# params:
#        NONE
# returns:
#        NONE
sub isUser() {
    lockFile($LOCKFILE_PASSWD);
    # get all of the user ids
    my @userDetails;
    setpwent();
    my $foundUser = 0;
    while (@userDetails = getpwent()) {
        push(@UIDS, $userDetails[2]);
        # check the username doen't already exist
        if($userDetails[0] eq $USER_NAME) {
            $foundUser = -1;
        }
    }
    endpwent();
    unlockFile($LOCKFILE_PASSWD);
    print $foundUser ? "true" : "false";
}

################################################################################
# parseCommandLine: this converts all of the command line options to the
#     variables.
# params:
#        NONE
# returns:
#        a boolean telling you whether to continue or not. non-zero = continue
sub parseCommandLine() {
    $USER_NAME = convertCommandLine($ARGV[0]);
    return ($#ARGV == 0);
}
################################################################################
