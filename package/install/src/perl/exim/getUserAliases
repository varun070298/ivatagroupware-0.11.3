#!/usr/bin/perl -Uw
################################################################################
# $Id: getUserAliases,v 1.2 2005/04/09 17:19:52 colinmacleod Exp $
#
# Get all of the user aliases from the server. The user aliases are all the
# email addresses on the local system which translate to a given user.
#
# Since: ivata groupware 0.9 (2002-09-12)
# Author: Colin MacLeod <colin.macleod@ivata.com>
# $Revision: 1.2 $
#
################################################################################
# Copyright (c) 2001 - 2005 ivata limited.
# All rights reserved.
# ---------------------------------------------------------
# ivata groupware may be redistributed under the GNU General Public
# License as published by the Free Software Foundation;
# version 2 of the License.
#
# These programs are free software; you can redistribute them and/or
# modify them under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 of the License.
#
# These programs are distributed in the hope that they will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License in the file LICENSE.txt for more
# details.
#
# If you would like a copy of the GNU General Public License write to
#
# Free Software Foundation, Inc.
# 59 Temple Place - Suite 330
# Boston, MA 02111-1307, USA.
#
#
# To arrange commercial support and licensing, contact ivata at
#                  http://www.ivata.com/contact.jsp
################################################################################
#
# $Log: getUserAliases,v $
# Revision 1.2  2005/04/09 17:19:52  colinmacleod
# Changed copyright text to GPL v2 explicitly.
#
# Revision 1.1.1.1  2005/03/10 17:49:14  colinmacleod
# Restructured ivata op around Hibernate/PicoContainer.
# Renamed ivata groupware.
#
# Revision 1.2  2004/03/21 21:16:32  colinmacleod
# Shortened name to ivata op.
#
# Revision 1.1  2004/02/05 21:54:07  colinmacleod
# Moved from webmail subproject.
#
# Revision 1.1.1.1  2004/01/27 20:59:58  colinmacleod
# Moved ivata op to sourceforge.
#
# Revision 1.2  2003/10/15 14:11:33  colin
# fixing for XDoclet
#
# Revision 1.1  2003/02/24 19:09:24  colin
# moved to business
#
# Revision 1.5  2003/02/02 08:57:25  colin
# changed die to unlockAndDie
#
# Revision 1.4  2002/10/31 15:12:30  ivatashop
# added virtusertable functionality for user aliases
#
# Revision 1.3  2002/10/25 07:30:34  jano
# in name of user can be character '_'
#
# Revision 1.2  2002/10/24 11:51:26  colin
# Testing in London Red Hat/Sub Cobalt server
#
# Revision 1.1  2002/09/24 09:34:29  colin
# added to cvs
#
################################################################################

################################################################################
# includes
use strict;
use Exim;
use Site;
################################################################################

################################################################################
# variable declarations
# this will be used to store all the email aliases for this user
my @ALIASES = ();
# the system user name
my $USER_NAME;
# a valid character in a user name part in a regular expression
my $USER_NAME_REGEX = "[-._A-Za-z0-9]";


# the lockfile to use - either aliases or virtusertable
my $LOCKFILE;

if ($ALIASES_VIRTUSERTABLE) {
  $LOCKFILE = $LOCKFILE_VIRTUSERTABLE;
} else {
  $LOCKFILE = $LOCKFILE_ALIASES;
}

################################################################################

################################################################################
# function prototypes
sub describeCommandLine();
sub parseCommandLine();
sub getEtcAliases();
sub getEtcVirtusertable();
sub getUserAliases();
################################################################################

################################################################################
# main routine
# if the command line parsing fails or the user specifies he wants help, then
# bring up the help screen
if(!parseCommandLine()) {
  describeCommandLine();
  dieInvalidArguments();
# otherwise rock & roll
} else {
  lockFile($LOCKFILE);
  getUserAliases();
  unlockFile($LOCKFILE);
}
################################################################################

################################################################################
# describeCommandLine: print out command line options.
# params:
#        NONE
# returns:
#        NONE
sub describeCommandLine() {
  print "\n";
  print "                             --- getUserAliases ---\n";
  print "       ivata's tool to retrieve an email alias list in exim systems.\n";
  print "\n";
  print "       You need perl installed on your system to use this tool.\n";
  print "\n";
  print " Usage: \n";
  print "       getUserAliases {username}\n";
  print "\n";
  print " Key:\n";
  print "  username      name of the user for whom to get the email aliases.\n";
  print "\n";
}

################################################################################
# parseCommandLine: this converts all of the command line options to the
#     variables.
# params:
#        NONE
# returns:
#        a boolean telling you whether to continue or not. non-zero = continue
sub parseCommandLine() {
  my $total = @ARGV;
  unless($total == 1) {
    return 0;
  }
  $USER_NAME = convertCommandLine(shift @ARGV);
  return -1;
}

################################################################################
# getUserAliases: retrieve user aliases and send them to standard out.
# params:
#        NONE
# returns:
#        NONE
sub getUserAliases() {
  # this routine just decides which config file actually holds the aliases and
  # passes the program flow to the correct one
  if ($ALIASES_VIRTUSERTABLE) {
    getEtcVirtusertable();
  } else {
    getEtcAliases();
  }
}

################################################################################
# getEtcAliases: retrieve user aliases from /etc/aliases and send them to
#     standard out.
# params:
#        NONE
# returns:
#        NONE
sub getEtcAliases() {
  # check this is a real user - commented out because we store aliases for
  # users no longer active
  #my $checkUserExists = checkUserExists($USER_NAME);
  #unlockAndDie($LOCKFILE_ALIASES, $checkUserExists) if($checkUserExists);

  open(ALIASES, "<${ALIASES_FILE}") || unlockAndDie($LOCKFILE, "Cannot open '${ALIASES_FILE}': $!");

  # go thro' the entire file ignoring any previous aliases for this user
  my $line;
 READ_ALIASES:
  while($line = <ALIASES>) {
    if(($line =~ /($USER_NAME_REGEX+)\s*:\s*($USER_NAME_REGEX+)\s*$/) &&
           ($2 eq $USER_NAME)){
      print "$1\n";
    }
  }

  close(ALIASES) ;
}

################################################################################
# getEtcVirtusertable: retrieve user aliases from /etc/virtusertable and send
#    them to standard out.
# params:
#        NONE
# returns:
#        NONE
sub getEtcVirtusertable() {
  # check this is a real user - commented out because we store aliases for
  # users no longer active
  #my $checkUserExists = checkUserExists($USER_NAME);
  #unlockAndDie($LOCKFILE_ALIASES, $checkUserExists) if($checkUserExists);

  open(VIRTUSERTABLE, "<${ALIASES_VIRTUSERTABLE_FILE}") || unlockAndDie($LOCKFILE, "Cannot open '${ALIASES_VIRTUSERTABLE_FILE}': $!");

  # go thro' the entire file ignoring any previous aliases for this user
  my $line;
 READ_VIRTUSERTABLE:
  while($line = <VIRTUSERTABLE>) {
    if(($line =~ /($USER_NAME_REGEX+)@(?:$USER_NAME_REGEX+)\s+($USER_NAME_REGEX+)\s*$/) &&
           ($2 eq $USER_NAME)){
      print "$1\n";
    }
  }

  close(ALIASES) ;
}
################################################################################
