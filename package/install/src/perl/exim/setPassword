#!/usr/bin/perl -Uw
################################################################################
# $Id: setPassword,v 1.2 2005/04/09 17:19:52 colinmacleod Exp $
#
# Change a user's password. This script is suited for UNIX-style operating
# system which use shadow password security.
#
# To allow the user which runs this and the other system scripts, the script
# must be run in root user mode. This is achieved by running the sudo program
# which must be installed on the system.
#
# Since: ivata groupware 0.9 (2002-07-20)
# Author: Colin MacLeod <colin.macleod@ivata.com>
# $Revision: 1.2 $
#
################################################################################
# Copyright (c) 2001 - 2005 ivata limited.
# All rights reserved.
# ---------------------------------------------------------
# ivata groupware may be redistributed under the GNU General Public
# License as published by the Free Software Foundation;
# version 2 of the License.
#
# These programs are free software; you can redistribute them and/or
# modify them under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 of the License.
#
# These programs are distributed in the hope that they will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License in the file LICENSE.txt for more
# details.
#
# If you would like a copy of the GNU General Public License write to
#
# Free Software Foundation, Inc.
# 59 Temple Place - Suite 330
# Boston, MA 02111-1307, USA.
#
#
# To arrange commercial support and licensing, contact ivata at
#                  http://www.ivata.com/contact.jsp
################################################################################
#
# $Log: setPassword,v $
# Revision 1.2  2005/04/09 17:19:52  colinmacleod
# Changed copyright text to GPL v2 explicitly.
#
# Revision 1.1.1.1  2005/03/10 17:49:17  colinmacleod
# Restructured ivata op around Hibernate/PicoContainer.
# Renamed ivata groupware.
#
# Revision 1.3  2004/11/03 18:33:12  colinmacleod
# Added checking to truncate passwords.
#
# Revision 1.2  2004/03/21 21:16:32  colinmacleod
# Shortened name to ivata op.
#
# Revision 1.1  2004/02/05 21:54:07  colinmacleod
# Moved from webmail subproject.
#
# Revision 1.1.1.1  2004/01/27 20:59:58  colinmacleod
# Moved ivata op to sourceforge.
#
# Revision 1.2  2003/10/15 14:11:33  colin
# fixing for XDoclet
#
# Revision 1.1  2003/02/24 19:09:24  colin
# moved to business
#
# Revision 1.8  2003/01/31 09:21:22  ivatashop
# USE_KEY is setp up by command line arguments !!
#
# Revision 1.7  2003/01/18 20:22:47  colin
# changes to get mail working with postfix, courier-imap and gentoo
#
# Revision 1.6  2002/11/19 19:05:48  ivatashop
# changed SLEEP back to 2 - slowly but surely...
#
# Revision 1.5  2002/11/15 12:18:51  ivatashop
# fixed popauth changes to work with redhat/cobalt in London
#
# Revision 1.4  2002/11/15 10:46:10  colin
# added popauth setting to setPassword
#
# Revision 1.3  2002/10/25 07:31:06  jano
# using new method for converitng arguments from command line
#
# Revision 1.2  2002/10/24 11:51:26  colin
# Testing in London Red Hat/Sub Cobalt server
#
# Revision 1.1  2002/08/11 11:44:28  colin
# first version
# scripts written for and tested on Debian exim server
#
################################################################################

################################################################################
# includes
use strict;
use Expect;
use Site;
use Exim;
################################################################################

################################################################################
# variable declarations
# command line parameter to allow bad passwords
my $ALLOW_BAD = 0;
# set to non-zero to test output
my $DEBUG = 0;
# if non-zero, there is no confirmation when the password is successfully
# changed
my $NO_CONFIRM = 1;
# password for the user
my $PASSWORD;
# system user name
my $USER_NAME;
# if non-zero, specified that the program should attempt to convert bad
# password messages into a key which can be localized
# NOTE - this is set by a command line argument!!
my $USE_KEY = 0;
################################################################################

################################################################################
# function prototypes
sub convertBadMessageToKey($);
sub describeCommandLine();
sub parseCommandLine();
sub setPassword();
################################################################################

################################################################################
# main routine
# if the command line parsing fails or the user specifies he wants help, then
# bring up the help screen
if(!parseCommandLine()) {
  describeCommandLine();
  dieInvalidArguments();
# otherwise rock & roll
} else {
  setPassword();
}
################################################################################


################################################################################
# convertBadMessageToKey: convert a bad message to a key which can be used
#     to specify local language equivalents
# params:
#        messsage: the bad message to be localized
# returns:
#        key: the equivalent key for this message
sub convertBadMessageToKey($) {
    my $message = shift;
    my $key = 0;
    my $regex;

  SEARCH_REGEX:
    for $regex (keys %PASSWD_BAD_MESSAGES) {
    if ($message =~ /$regex/) {
        $key = $PASSWD_BAD_MESSAGES{$regex};
        last SEARCH_REGEX;
    }
    }

    unless ($key) {
    $key = $PASSWD_BAD_MESSAGE_DEFAULT;
    }

    return "$key\n";
}

################################################################################
# describeCommandLine: print out command line options.
# params:
#        NONE
# returns:
#        NONE
sub describeCommandLine() {
  print "\n";
  print "                         --- setPassword ---\n";
  print "          ivata's tool to change a user password in *NIX systems.\n";
  print "\n";
  print "       You need perl installed on your system to use this tool.\n";
  print "\n";
  print " Usage: \n";
  print "       setPassword {username} {password} {use_key}\n";
  print "\n";
  print " Key:\n";
  print "  username      name of the user for whom to change password.\n";
  print "  password      user's new password\n";
  print "  use_key       if non-zero, bad password messages are substituted\n";
  print "                for a key which can then be localized in the calling\n";
  print "                application. Keys are specified in Site.pm\n";
  print "  allow_bad     if non-zero, bad passwords are allowed\n";
  print "\n";
}

################################################################################
# parseCommandLine: this converts all of the command line options to the
#     variables.
# params:
#        NONE
# returns:
#        a boolean telling you whether to continue or not. non-zero = continue
sub parseCommandLine() {
  $USER_NAME = convertCommandLine($ARGV[0]);
  $PASSWORD = convertCommandLine($ARGV[1]);

  if ($PASSWD_TRUNCATE
        && (length($PASSWORD) > $PASSWD_TRUNCATE)) {
      $PASSWORD = substr($PASSWORD, 0, $PASSWD_TRUNCATE);
  }

  $USE_KEY = convertCommandLine($ARGV[2]);
  $ALLOW_BAD = convertCommandLine($ARGV[3]);
  return (($#ARGV >= 1) && ($#ARGV <= 3));
}

################################################################################
# setPassword: does the funky stuff to change the user's password.
# params:
#        NONE
# returns:
#        NONE
sub setPassword() {
  my $process;
  # first complete saslpasswd, only if set in site pm
  if ($PASSWD_SASL) {
    ($process=Expect->spawn("$PASSWD_SASL_COMMAND $USER_NAME"))
        || die("Unable to spawn $PASSWD_SASL $USER_NAME\n");
    $process->log_stdout(0) unless $DEBUG;
    sleep $PASSWD_SLEEP;

    unless($process->expect($PASSWD_EXPECT_TIMEOUT, $PASSWD_SASL_EXPECT)) {
      $process->soft_close();
      die "SASL Password could not be changed\n";
    }

    $process->send("$PASSWORD\n");
    sleep $PASSWD_SLEEP;

    unless($process->expect($PASSWD_EXPECT_TIMEOUT, '-re', $PASSWD_SASL_EXPECT_CONFIRM)) {
      $process->soft_close();
      die "SASL Password could not be changed - could not confirm.\n";
    }
  }

  # now set the standard unix password
  ($process=Expect->spawn("$PASSWD_COMMAND $USER_NAME"))
      || die("Unable to spawn $PASSWD_COMMAND $USER_NAME\n");
  $process->log_stdout(0) unless $DEBUG;
  sleep $PASSWD_SLEEP;

  unless($process->expect($PASSWD_EXPECT_TIMEOUT, $PASSWD_EXPECT)) {
    $process->soft_close();
    die "Password could not be changed\n";
  }

  $process->send("$PASSWORD\n");
  sleep $PASSWD_SLEEP;

  # if we allow bad passwords, simple change the expectation for a bad
  # password text so it will never match
  if ($ALLOW_BAD) {
      $PASSWD_EXPECT_BAD = "NeverGonnaHappen";
  }
  unless($process->expect($PASSWD_EXPECT_TIMEOUT, '-re', $PASSWD_EXPECT_BAD, $PASSWD_EXPECT_CONFIRM)) {
    $process->soft_close();
    die "Password could not be changed - could not confirm.\n";
  }
  # if the bad password message was given, just die
  if($process->exp_match_number() == 1) {
    $process->soft_close();
    my $dyingGasp = $process->match();
    # see if we should convert the bad messages to keys
    if ($USE_KEY) {
      $dyingGasp = convertBadMessageToKey($dyingGasp);
    }
    die $dyingGasp;
  }

  $process->send("$PASSWORD\n");
  sleep $PASSWD_SLEEP;

  unless ($process->expect($PASSWD_EXPECT_TIMEOUT, $PASSWD_EXPECT_SUCCESS)) {
    $process->soft_close();
    die "Password could not be changed - confirmation failed.\n";
  }

  # now complete popauth, only if set in site pm
  if ($PASSWD_POPAUTH) {
      # note: there is no error checking on popauth - we don't want to fail for this
      my $popauthProcess;
      my $popauthDyingGasp = 0;
      if ($popauthProcess=Expect->spawn("$PASSWD_POPAUTH_COMMAND $USER_NAME")) {
          $popauthProcess->log_stdout(0) unless $DEBUG;
          sleep $PASSWD_SLEEP;
          if ($popauthProcess->expect($PASSWD_EXPECT_TIMEOUT, $PASSWD_POPAUTH_EXPECT)) {
              $popauthProcess->send("$PASSWORD\n");
              sleep $PASSWD_SLEEP;

              if ($popauthProcess->expect($PASSWD_EXPECT_TIMEOUT, $PASSWD_POPAUTH_EXPECT_CONFIRM)) {
                  $popauthProcess->send("$PASSWORD\n");
                  sleep $PASSWD_SLEEP;
              } else {
                  $popauthDyingGasp = "Running $PASSWD_POPAUTH_COMMAND $USER_NAME, never received $PASSWD_POPAUTH_EXPECT_CONFIRM.";
              }
              $process->soft_close();
          } else {
              $popauthDyingGasp = "Running $PASSWD_POPAUTH_COMMAND $USER_NAME, never received $PASSWD_POPAUTH_EXPECT.";
              $process->soft_close();
          }

      } else {
          $popauthDyingGasp = "Unable to spawn $PASSWD_POPAUTH_COMMAND $USER_NAME";
      }
      # if there was a popauth error, append a message to the popauth log
      if ($popauthDyingGasp) {
          system("echo \"$popauthDyingGasp\" >> $PASSWD_POPAUTH_LOG");
      } else {
          system("echo \"Password successfully changed for $USER_NAME.\" >> $PASSWD_POPAUTH_LOG");
      }
  }


  # Must soft close this file handle otherwise on some system
  # command may fail to complete.
  $process->soft_close();

  unless($NO_CONFIRM) {
    print "Ok.\n";
  }
}
################################################################################

