#!/usr/bin/perl -Uw
################################################################################
# $Id: removeUser,v 1.2 2005/04/09 17:19:52 colinmacleod Exp $
#
# Remove a user from the system. This script is suited for UNIX-style operating
# system which uses shadow password security.
#
# To allow the user which runs this and the other system scripts, the script
# must be run in root user mode. This is achieved by running the sudo program
# which must be installed on the system.
#
# Since: ivata groupware 0.9 (2002-07-20)
# Author: Colin MacLeod <colin.macleod@ivata.com>
# $Revision: 1.2 $
#
################################################################################
# Copyright (c) 2001 - 2005 ivata limited.
# All rights reserved.
# ---------------------------------------------------------
# ivata groupware may be redistributed under the GNU General Public
# License as published by the Free Software Foundation;
# version 2 of the License.
#
# These programs are free software; you can redistribute them and/or
# modify them under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 of the License.
#
# These programs are distributed in the hope that they will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License in the file LICENSE.txt for more
# details.
#
# If you would like a copy of the GNU General Public License write to
#
# Free Software Foundation, Inc.
# 59 Temple Place - Suite 330
# Boston, MA 02111-1307, USA.
#
#
# To arrange commercial support and licensing, contact ivata at
#                  http://www.ivata.com/contact.jsp
################################################################################
#
# $Log: removeUser,v $
# Revision 1.2  2005/04/09 17:19:52  colinmacleod
# Changed copyright text to GPL v2 explicitly.
#
# Revision 1.1.1.1  2005/03/10 17:49:14  colinmacleod
# Restructured ivata op around Hibernate/PicoContainer.
# Renamed ivata groupware.
#
# Revision 1.2  2004/03/21 21:16:32  colinmacleod
# Shortened name to ivata op.
#
# Revision 1.1  2004/02/05 21:54:07  colinmacleod
# Moved from webmail subproject.
#
# Revision 1.1.1.1  2004/01/27 20:59:58  colinmacleod
# Moved ivata op to sourceforge.
#
# Revision 1.2  2003/10/15 14:11:33  colin
# fixing for XDoclet
#
# Revision 1.1  2003/02/24 19:09:24  colin
# moved to business
#
# Revision 1.3  2002/10/25 07:31:06  jano
# using new method for converitng arguments from command line
#
# Revision 1.2  2002/10/24 11:51:26  colin
# Testing in London Red Hat/Sub Cobalt server
#
# Revision 1.1  2002/08/11 11:44:27  colin
# first version
# scripts written for and tested on Debian exim server
#
################################################################################

################################################################################
# includes
use strict;
use Exim;
use Site;
################################################################################

################################################################################
# variable declarations
# system user name
my $USER_NAME;
################################################################################

################################################################################
# function prototypes
sub describeCommandLine();
sub parseCommandLine();
sub removeUser();
################################################################################

################################################################################
# main routine
# if the command line parsing fails or the user specifies he wants help, then
# bring up the help screen
if(!parseCommandLine()) {
  describeCommandLine();
  dieInvalidArguments();
# otherwise rock & roll
} else {
  lockFile($LOCKFILE_PASSWD);
  removeUser();
  unlockFile($LOCKFILE_PASSWD);
}
################################################################################

################################################################################
# describeCommandLine: print out command line options.
# params:
#        NONE
# returns:
#        NONE
sub describeCommandLine() {
  print "\n";
  print "                              --- removeUser ---\n";
  print "                ivata's tool to remove a user from *NIX systems.\n";
  print " Description:\n";
  print "       This program must be run as root and will remove a user from the\n";
  print "       operating system. The program will execute without any feedback if\n";
  print "       everything is okay, otherwise an error is sent to the standard error\n";
  print "       output.\n";
  print "\n";
  print "       You need perl installed on your system to use this tool.\n";
  print "\n";
  print " Usage: \n";
  print "       removeUser {username}\n";
  print "\n";
  print " Key:\n";
  print "  username      user name to be removed.\n";
  print "\n";
}

################################################################################
# parseCommandLine: this converts all of the command line options to the
#     variables.
# params:
#        NONE
# returns:
#        a boolean telling you whether to continue or not. non-zero = continue
sub parseCommandLine() {
  $USER_NAME = convertCommandLine($ARGV[0]);
  return ($#ARGV == 0);
}

################################################################################
# removeUser: does the funky stuff to remove the user from the system.
# params:
#        NONE
# returns:
#        NONE
sub removeUser() {
  # if you specified the userdel command, use that
  if($USERDEL) {
    system($USERDEL, $USER_NAME) &&
             # rely on userdel to provide the error message
             unlockAndDie($LOCKFILE_PASSWD, "\n");
  } else {
    # we'll have to handle the files ourselves

    # create a temporary passwd file and print the contents of the old passwd
    # file less our user
    open(PASSWD, "<$PASSWD") || unlockAndDie($LOCKFILE_PASSWD, "Can't open $PASSWD: $!\n");
    open(PASSWDTEMP, ">$PASSWD.tmp") || unlockAndDie($LOCKFILE_PASSWD, "Can't open $PASSWD.tmp: $!\n");
    my $line;
    my $foundUser = 0;
    while($line = <PASSWD>) {
      $line =~ /^([^:]+):/;
      if($USER_NAME eq $1) {
        $foundUser = 1;
      } else {
        print PASSWDTEMP $line;
      }
    }
    close(PASSWDTEMP) ;
    close(PASSWD) ;
    unlockAndDie($LOCKFILE_PASSWD, "$USER_NAME not found in $PASSWD.\n") unless($foundUser);


    # repeat the action for the shadow file
    open(SHADOW, "<$SHADOW") || unlockAndDie($LOCKFILE_PASSWD, "Can't open $SHADOW: $!\n");
    open(SHADOWTEMP, ">$SHADOW.tmp") || unlockAndDie($LOCKFILE_PASSWD, "Can't open $SHADOW.tmp: $!\n");
    $foundUser = 0;
    while($line = <SHADOW>) {
      $line =~ /^([^:]+):/;
      if($USER_NAME eq $1) {
        $foundUser = 1;
      } else {
        print SHADOWTEMP $line;
      }
    }
    close(SHADOWTEMP) ;
    close(SHADOW) ;
    unlockAndDie($LOCKFILE_PASSWD, "$USER_NAME not found in $SHADOW.") unless($foundUser);

    rename($PASSWD, "$PASSWD.ivata");
    rename("$PASSWD.tmp", $PASSWD);
    rename($SHADOW, "$SHADOW.ivata");
    rename("$SHADOW.tmp", $SHADOW);
  }
}
################################################################################
