<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2001 - 2005 ivata limited.
// All rights reserved.
// =========================================================
// ivata groupware may be redistributed under the GNU General Public
// License as published by the Free Software Foundation;
// version 2 of the License.
//
// These programs are free software; you can redistribute them and/or
// modify them under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
//
// These programs are distributed in the hope that they will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// See the GNU General Public License in the file LICENSE.txt for more
// details.
//
// If you would like a copy of the GNU General Public License write to
//
// Free Software Foundation, Inc.
// 59 Temple Place - Suite 330
// Boston, MA 02111-1307, USA.
//
//
// To arrange commercial support and licensing, contact ivata at
//                  http://www.ivata.com/contact.jsp
//
////////////////////////////////////////////////////////////////////////////////
//
// $Log: maven.xml,v $
// Revision 1.5  2005/04/27 15:15:55  colinmacleod
// Added extract for groovy files.
// Fixed webtheme style files location.
//
// Revision 1.4  2005/04/10 20:38:47  colinmacleod
// Added mkdir for web directory.
//
// Revision 1.3  2005/04/09 17:19:53  colinmacleod
// Changed copyright text to GPL v2 explicitly.
//
// Revision 1.2  2005/03/22 18:56:52  colinmacleod
// Expanded contents of ivatagroupware-hibernate.
//
// Revision 1.1.1.1  2005/03/10 17:49:20  colinmacleod
// Restructured ivata op around Hibernate/PicoContainer.
// Renamed ivata groupware.
//
// Revision 1.9  2004/12/31 19:25:35  colinmacleod
// Cosmetic indentation improvements - tabs to spaces.
//
// Revision 1.8  2004/11/12 15:48:27  colinmacleod
// Added masks subproject.
//
// Revision 1.7  2004/03/21 21:16:34  colinmacleod
// Shortened name to ivata op.
//
// Revision 1.6  2004/03/10 22:34:11  colinmacleod
// Changed webmail to mail in webapp.
//
// Revision 1.5  2004/03/07 17:09:53  colinmacleod
// Restructured to copy webapps to subdirectories.
//
// Revision 1.4  2004/03/03 22:36:41  colinmacleod
// Restructured projects around ejb, jar and war artifacts.
//
// Revision 1.3  2004/02/04 15:28:05  janboros
// including dependencies
//
// Revision 1.2  2004/02/02 21:03:17  colinmacleod
// Added copyright notice.
//
////////////////////////////////////////////////////////////////////////////////
-->

<project
    xmlns:ant="jelly:ant"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    default="war:install">

  <!--
    copy over the WAR elements of any ivata groupware sub project to the correct
    destination directories.
  -->
  <goal name="copy:subProject">
    <ant:echo message="Copying subproject ${subProject}"/>
    <!-- if you didn't specify a build dir, default to the project name -->
    <j:if test="${buildDir == null}">
      <j:set var="buildDir" value="${pom.artifactId}"/>
    </j:if>

    <!-- not all projects use the same name for target and source dirs -->
    <!-- first the source dirs are chosen -->
    <j:choose>
      <j:when test="${subProject == 'addressBook'}">
        <j:set var="sourceDir" value="addressbook"/>
      </j:when>
      <j:when test="${subProject == 'war'}">
        <j:set var="sourceDir" value="package/war"/>
      </j:when>
      <j:when test="${subProject == 'mail'}">
        <j:set var="sourceDir" value="webmail"/>
      </j:when>
      <j:otherwise>
        <j:set var="sourceDir" value="${subProject}"/>
      </j:otherwise>
    </j:choose>
    <!-- now target dirs are chosen -->
    <j:choose>
      <j:when test="${subProject == 'core'}">
        <j:set var="targetDir" value="."/>
      </j:when>
      <j:when test="${subProject == 'search'}">
        <j:set var="targetDir" value="."/>
      </j:when>
      <j:when test="${subProject == 'security'}">
        <j:set var="targetDir" value="."/>
      </j:when>
      <j:when test="${subProject == 'war'}">
        <j:set var="targetDir" value="."/>
      </j:when>
      <j:otherwise>
        <j:set var="targetDir" value="${subProject}"/>
      </j:otherwise>
    </j:choose>

    <!-- copy over JSP files -->
    <ant:mkdir dir="${maven.build.dir}/${buildDir}/${targetDir}"/>
    <ant:copy todir="${maven.build.dir}/${buildDir}/${targetDir}">
      <ant:fileset dir="${basedir}/../../${sourceDir}/src/web">
        <ant:include name="**/*"/>
        <ant:exclude name="WEB-INF/**"/>
        <ant:exclude name="style/**"/>
      </ant:fileset>
    </ant:copy>
    <!--
      available checks if there is a WEB-INF in the source project - contents
      of the WEB-INF are copied to the target root
    -->
    <u:available file="${basedir}/../../${sourceDir}/src/${buildDir}/WEB-INF">
      <ant:echo message="Copying ${subProject} WEB-INF"/>
      <ant:copy todir="${maven.build.dir}/web">
        <ant:fileset dir="${basedir}/../../${sourceDir}/src/web">
          <ant:include name="WEB-INF/**"/>
        </ant:fileset>
      </ant:copy>
    </u:available>
    <ant:mkdir dir="${maven.build.dir}/${buildDir}/style/${targetDir}"/>
    <!-- not all subprojects have their own style sheets -->
    <u:available file="${basedir}/../../${sourceDir}/src/web/style/template">
      <ant:echo message="Copying ${subProject} style sheet templates"/>
      <ant:mkdir dir="${maven.build.dir}/${buildDir}/style/template/${targetDir}"/>
      <ant:copy todir="${maven.build.dir}/${buildDir}/style/template/${targetDir}">
        <ant:fileset dir="${basedir}/../../${sourceDir}/src/web/style/template">
          <ant:include name="**"/>
        </ant:fileset>
      </ant:copy>
    </u:available>
    <u:available file="${basedir}/../../${sourceDir}/src/web/style">
      <ant:echo message="Copying ${subProject} style sheets (not templates)"/>
      <ant:mkdir dir="${maven.build.dir}/${buildDir}/style/${targetDir}"/>
      <ant:copy todir="${maven.build.dir}/${buildDir}/style/${targetDir}">
        <ant:fileset dir="${basedir}/../../${sourceDir}/src/web/style">
          <ant:include name="**"/>
          <ant:exclude name="template"/>
        </ant:fileset>
      </ant:copy>
    </u:available>
  </goal>
  <!--
    use these goals from the command line to just copy changes in one subproject
  -->
  <goal name="copy:addressBook">
    <j:set var="subProject" value="addressBook"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:calendar">
    <j:set var="subProject" value="calendar"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:core">
    <j:set var="subProject" value="core"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:library">
    <j:set var="subProject" value="library"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:mail">
    <j:set var="subProject" value="mail"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:mask">
    <j:set var="subProject" value="mask"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:search">
    <j:set var="subProject" value="search"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:security">
    <j:set var="subProject" value="security"/>
    <attainGoal name="copy:subProject"/>
  </goal>
  <goal name="copy:war">
    <j:set var="subProject" value="war"/>
    <attainGoal name="copy:subProject"/>
  </goal>

  <!--
    copy all the subprojects - convenient if you changed loadsafiles, or can't
    remember which ones you changed
    :-)
  maven-->
  <goal name="copy:all">
    <attainGoal name="copy:addressBook"/>
    <attainGoal name="copy:calendar"/>
    <attainGoal name="copy:core"/>
    <attainGoal name="copy:library"/>
    <attainGoal name="copy:mail"/>
    <attainGoal name="copy:mask"/>
    <attainGoal name="copy:security"/>
    <attainGoal name="copy:war"/>
  </goal>

  <preGoal name="war:init">
    <ant:unjar
        src="${maven.repo.local}/ivatamasks/jars/ivatamasks-web-${ivatamasks.version}.jar"
        dest="${maven.build.dir}/web">
      <patternset>
        <include name="WEB-INF/*"/>
      </patternset>
    </ant:unjar>
    <!-- extract webtheme war -->
    <ant:mkdir dir="${maven.build.dir}/web/theme"/>
    <ant:unjar
        src="${maven.repo.local}/ivatamasks/wars/ivatamasks-webtheme-war-${ivatamasks.version}.war"
        dest="${maven.build.dir}/web/theme">
      <patternset>
        <exclude name="WEB-INF/**/*"/>
        <exclude name="style/**/*"/>
      </patternset>
    </ant:unjar>
    <ant:unjar
        src="${maven.repo.local}/ivatamasks/wars/ivatamasks-webtheme-war-${ivatamasks.version}.war"
        dest="${maven.build.dir}/web">
      <patternset>
        <include name="WEB-INF/**/*"/>
        <include name="style/**/*"/>
      </patternset>
    </ant:unjar>
    <!-- extract all the hibernate configuration files (created by xdoclet) -->
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-hibernate-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
    </ant:unjar>
    <!-- extract all the groovy files; they like to be in classes -->
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-addressbook-jar-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
      <patternset>
        <include name="*.groovy"/>
      </patternset>
    </ant:unjar>
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-calendar-jar-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
      <patternset>
        <include name="*.groovy"/>
      </patternset>
    </ant:unjar>
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-library-jar-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
      <patternset>
        <include name="*.groovy"/>
      </patternset>
    </ant:unjar>
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-search-jar-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
      <patternset>
        <include name="*.groovy"/>
      </patternset>
    </ant:unjar>
    <ant:unjar
        src="${maven.repo.local}/ivatagroupware/jars/ivatagroupware-security-jar-${pom.currentVersion}.jar"
        dest="${maven.build.dir}/web/WEB-INF/classes">
      <patternset>
        <include name="*.groovy"/>
      </patternset>
    </ant:unjar>
    <!--
      these projects are copied from the ivata groupware root
    -->
    <j:set var="buildDir" value="web"/>
    <attainGoal name="copy:all"/>
  </preGoal>
</project>

